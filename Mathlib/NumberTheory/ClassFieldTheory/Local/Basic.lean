import Mathlib
import Mathlib.NumberTheory.LocalField.Continuous

universe u

variable (K : Type u) [Field K]

notation3 "Gal(" L:100 "/" K ")" => L ‚âÉ‚Çê[K] L

section AuxDefs

class IsAbelianGalois (K L : Type*) [Field K] [Field L] [Algebra K L] : Prop extends
  IsGalois K L, IsMulCommutative Gal(L/K)

instance : IsAbelianGalois K K where
  is_comm.comm _ _ := Subsingleton.elim _ _

instance : Algebra.IsQuadraticExtension ‚Ñù ‚ÑÇ := ‚ü®by simp‚ü©
instance : IsAbelianGalois ‚Ñù ‚ÑÇ where

namespace ValuativeExtension

open ValuativeRel

variable (A B : Type*) [CommRing A] [CommRing B] [ValuativeRel A] [ValuativeRel B]
variable [Algebra A B] [ValuativeExtension A B]

theorem _root_.injective_iff_map_eq_one‚ÇÄ {G H F} [GroupWithZero G] [CancelMonoidWithZero H]
    [FunLike F G H] [MonoidWithZeroHomClass F G H]
    (f : F) : Function.Injective f ‚Üî ‚àÄ a, f a = 1 ‚Üí a = 1 := by
  constructor
  ¬∑ aesop
  ¬∑ intros hf a b hab
    have : Nontrivial H := ‚ü®0, 1, by simpa using hf 0‚ü©
    obtain rfl | hb := eq_or_ne b 0
    ¬∑ by_contra ha
      have : f a ‚â† 0 := ((Units.mk0 a ha).map
          (MonoidWithZeroHomClass.toMonoidWithZeroHom f).toMonoidHom).ne_zero
      simp [hab] at this
    ¬∑ have : f b ‚â† 0 := ((Units.mk0 b hb).map
        (MonoidWithZeroHomClass.toMonoidWithZeroHom f).toMonoidHom).ne_zero
      simpa [hb] using congr_arg (¬∑ * b) (hf (a / b) (by
        apply mul_left_injective‚ÇÄ this
        simp only [‚Üê map_mul, div_mul_cancel‚ÇÄ a hb, hab, one_mul]))

instance : (valuation A).HasExtension (valuation B) where
  val_isEquiv_comap x y := by
    simp [‚Üê Valuation.Compatible.rel_iff_le, ValuativeExtension.rel_iff_rel]

end ValuativeExtension

noncomputable
def normSubgroup (R S : Type*) [CommRing R] [Ring S] [Algebra R S] : Subgroup RÀ£ :=
    (Units.map (Algebra.norm R (S := S))).range

@[simp]
lemma normSubgroup_self (R : Type*) [CommRing R] : normSubgroup R R = ‚ä§ :=
  top_le_iff.mp fun x _ ‚Ü¶ ‚ü®x, by simp‚ü©

lemma normSubgroup_mono {R S T : Type*} [Field R] [Field S] [CommRing T]
    [Algebra R S] [Algebra R T] (f : S ‚Üí‚Çê[R] T) : normSubgroup R T ‚â§ normSubgroup R S := by
  rintro _ ‚ü®x, rfl‚ü©
  letI := f.toRingHom.toAlgebra
  have : IsScalarTower R S T := .of_algebraMap_eq' f.comp_algebraMap.symm
  exact ‚ü®x.map (Algebra.norm S), by ext; simp [Algebra.norm_norm]‚ü©

lemma normSubgroup_congr {R S T : Type*} [Field R] [Field S] [Field T]
    [Algebra R S] [Algebra R T] (f : S ‚âÉ‚Çê[R] T) : normSubgroup R S = normSubgroup R T :=
  (normSubgroup_mono f.symm.toAlgHom).antisymm (normSubgroup_mono f.toAlgHom)

variable {K} in
def IsNormSubgroup (N : Subgroup KÀ£) : Prop :=
  ‚àÉ (L : Type u) (_ : Field L) (_ : Algebra K L) (_ : FiniteDimensional K L)
    (_ : IsAbelianGalois K L), N = normSubgroup K L

lemma isNormSubgroup_normSubgroup (L : Type u) [Field L] [Algebra K L] [FiniteDimensional K L]
    [IsAbelianGalois K L] : IsNormSubgroup (normSubgroup K L) :=
  ‚ü®L, ‚Äπ_‚Ä∫, ‚Äπ_‚Ä∫, ‚Äπ_‚Ä∫, ‚Äπ_‚Ä∫, rfl‚ü©

lemma isNormSubgroup_top : IsNormSubgroup (‚ä§ : Subgroup KÀ£) :=
  ‚ü®K, ‚Äπ_‚Ä∫, inferInstance, inferInstance, ‚ü®‚ü©, by simp‚ü©

end AuxDefs

namespace ClassFieldTheory

variable [TopologicalSpace K]

class SatisfiesLocalExistenceTheorem : Prop where
  cond : ‚àÄ (s : Subgroup KÀ£), IsOpen (s : Set KÀ£) ‚àß s.FiniteIndex ‚Üî IsNormSubgroup s

lemma isOpen_normSubgroup [SatisfiesLocalExistenceTheorem K] (L : Type u) [Field L] [Algebra K L]
    [FiniteDimensional K L] [IsAbelianGalois K L] : IsOpen (normSubgroup K L : Set KÀ£) :=
  ((SatisfiesLocalExistenceTheorem.cond _).mpr (isNormSubgroup_normSubgroup K L)).1

instance finiteIndex_normSubgroup [SatisfiesLocalExistenceTheorem K] (L : Type u)
    [Field L] [Algebra K L] [FiniteDimensional K L] [IsAbelianGalois K L] :
    (normSubgroup K L).FiniteIndex :=
  ((SatisfiesLocalExistenceTheorem.cond _).mpr (isNormSubgroup_normSubgroup K L)).2

open scoped ValuativeRel in
@[ext]
structure LocalArtinMapData where
  artinMap : ‚àÄ (L : Type u) [Field L] [Algebra K L] [FiniteDimensional K L]
    [IsAbelianGalois K L], KÀ£ ‚ß∏ normSubgroup K L ‚âÉ* Gal(L/K)
  isArithFrobAt_artinMap :
    ‚àÄ [ValuativeRel K] [IsNonarchimedeanLocalField K]
    (L : Type u) [Field L] [ValuativeRel L] [TopologicalSpace L] [IsNonarchimedeanLocalField L]
    [Algebra K L] [FiniteDimensional K L] [IsAbelianGalois K L]
    [ValuativeRel.IsUnramified K L] (œñ : ùí™[K]) (hœñ : Irreducible œñ),
    IsArithFrobAt ùí™[K] (S := ùí™[L]) (artinMap L (Units.mk0 œñ.1 hœñ.ne_zero'))
      (IsLocalRing.maximalIdeal _)
  artinMap_algebraMap : ‚àÄ (L : Type u) [Field L] [Algebra K L] [FiniteDimensional K L]
    [IsAbelianGalois K L] (M : Type u) [Field M] [Algebra K M]
    [FiniteDimensional K M] [IsAbelianGalois K M]
    [Algebra L M] [IsScalarTower K L M] (x : KÀ£) (y : L),
    artinMap M x (algebraMap L M y) = algebraMap L M (artinMap L x y)

lemma LocalArtinMapData.restrictNormal_artinMap (Art : LocalArtinMapData K)
    (L : Type u) [Field L] [Algebra K L] [FiniteDimensional K L]
    [IsAbelianGalois K L] (M : Type u) [Field M] [Algebra K M]
    [FiniteDimensional K M] [IsAbelianGalois K M]
    [Algebra L M] [IsScalarTower K L M] (x : KÀ£) :
    AlgEquiv.restrictNormal (Art.artinMap M x) L = Art.artinMap L x := by
  ext x
  apply (algebraMap L M).injective
  simp [Art.artinMap_algebraMap]

class SatisfiesLocalClassFieldTheory : Prop where
  satisfiesLocalExistenceTheorem : SatisfiesLocalExistenceTheorem K
  nonempty_localArtinMapData : Nonempty (LocalArtinMapData K)

noncomputable
def localArtinMapData [SatisfiesLocalClassFieldTheory K] : LocalArtinMapData K :=
  Nonempty.some (SatisfiesLocalClassFieldTheory.nonempty_localArtinMapData)

noncomputable
def artinMap [SatisfiesLocalClassFieldTheory K] (L : Type u) [Field L] [Algebra K L]
    [FiniteDimensional K L] [IsAbelianGalois K L] :
    KÀ£ ‚Üí* Gal(L/K) :=
  ((localArtinMapData K).artinMap L).toMonoidHom.comp (QuotientGroup.mk' _)

lemma ker_artinMap [SatisfiesLocalClassFieldTheory K] (L : Type u) [Field L] [Algebra K L]
    [FiniteDimensional K L] [IsAbelianGalois K L] :
    (artinMap K L).ker = normSubgroup K L := by
  ext; simp [artinMap]

lemma artinMap_surjective [SatisfiesLocalClassFieldTheory K] (L : Type u) [Field L] [Algebra K L]
    [FiniteDimensional K L] [IsAbelianGalois K L] :
    Function.Surjective (artinMap K L) :=
  ((localArtinMapData K).artinMap L).surjective.comp Quotient.mk_surjective

lemma restrictNormal_artinMap [SatisfiesLocalClassFieldTheory K]
    (L : Type u) [Field L] [Algebra K L] [FiniteDimensional K L]
    [IsAbelianGalois K L] (M : Type u) [Field M] [Algebra K M]
    [FiniteDimensional K M] [IsAbelianGalois K M]
    [Algebra L M] [IsScalarTower K L M] (x : KÀ£) :
    AlgEquiv.restrictNormal (artinMap K M x) L = artinMap K L x :=
  (localArtinMapData K).restrictNormal_artinMap ..

@[simp]
lemma artinMap_algebraMap [SatisfiesLocalClassFieldTheory K]
    (L : Type u) [Field L] [Algebra K L] [FiniteDimensional K L]
    [IsAbelianGalois K L] (M : Type u) [Field M] [Algebra K M]
    [FiniteDimensional K M] [IsAbelianGalois K M]
    [Algebra L M] [IsScalarTower K L M] (x : KÀ£) (a : L) :
    artinMap K M x (algebraMap L M a) = algebraMap L M (artinMap K L x a) := by
  rw [‚Üê restrictNormal_artinMap K L M]
  simp

attribute [instance] SatisfiesLocalClassFieldTheory.satisfiesLocalExistenceTheorem

end ClassFieldTheory

section Complex

instance : ConnectedSpace ‚ÑÇÀ£ := by
  suffices ConnectedSpace { z : ‚ÑÇ // z ‚â† 0 } from
    let e := unitsHomeomorphNeZero (G‚ÇÄ := ‚ÑÇ); e.symm.surjective.connectedSpace e.symm.continuous
  refine isConnected_iff_connectedSpace (s := { z : ‚ÑÇ | z ‚â† 0 }).mp
    (isConnected_compl_singleton_of_one_lt_rank (by simp) _)

instance : ConnectedSpace ‚ÑÇÀ£ := by
  suffices ConnectedSpace { z : ‚ÑÇ // z ‚â† 0 } from
    let e := unitsHomeomorphNeZero (G‚ÇÄ := ‚ÑÇ); e.symm.surjective.connectedSpace e.symm.continuous
  refine isConnected_iff_connectedSpace (s := { z : ‚ÑÇ | z ‚â† 0 }).mp
    (isConnected_compl_singleton_of_one_lt_rank (by simp) _)

lemma _root_.Subgroup.eq_top_of_isOpen_of_connectedSpace
    {G : Type*} [Group G] [TopologicalSpace G] [IsTopologicalGroup G] [ConnectedSpace G]
    (H : Subgroup G) (h : IsOpen (X := G) H) : H = ‚ä§ :=
  SetLike.coe_injective (((connectedSpace_iff_clopen.mp ‚Äπ_‚Ä∫).2 H
    ‚ü®H.isClosed_of_isOpen h, h‚ü©).resolve_left (Set.nonempty_iff_ne_empty.mp ‚ü®(1 : G), H.one_mem‚ü©))

instance {G : Type*} [Group G] [TopologicalSpace G] [IsTopologicalGroup G] [ConnectedSpace G] :
    Subsingleton (OpenSubgroup G) :=
  subsingleton_of_forall_eq ‚ä§ fun H ‚Ü¶ SetLike.coe_injective <|
    by exact congr($(H.1.eq_top_of_isOpen_of_connectedSpace H.2).1)

lemma Complex.isNormSubgroup_iff {G : Subgroup ‚ÑÇÀ£} : IsNormSubgroup G ‚Üî G = ‚ä§ := by
  refine ‚ü®?_, (¬∑ ‚ñ∏ isNormSubgroup_top ‚ÑÇ)‚ü©
  rintro ‚ü®L, _, _, _, _, rfl‚ü©
  let e : ‚ÑÇ ‚âÉ‚Çê[‚ÑÇ] L := .ofBijective (Algebra.ofId _ _)
    IsAlgClosed.algebraMap_bijective_of_isIntegral
  rw [normSubgroup_congr e.symm, normSubgroup_self]

instance : ClassFieldTheory.SatisfiesLocalExistenceTheorem ‚ÑÇ where
  cond G := by
    rw [Complex.isNormSubgroup_iff]
    refine ‚ü®fun ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© ‚Ü¶ ?_, by rintro rfl; exact ‚ü®isOpen_univ, inferInstance‚ü©‚ü©
    exact Subgroup.eq_top_of_isOpen_of_connectedSpace _ h‚ÇÅ

def _root_.MulEquiv.ofSubsingleton
      (G H : Type*) [Monoid G] [Monoid H] [Subsingleton G] [Subsingleton H] :
    G ‚âÉ* H where
  toFun := 1
  invFun := 1
  left_inv _ := Subsingleton.elim _ _
  right_inv _ := Subsingleton.elim _ _
  map_mul' _ _ := Subsingleton.elim _ _

instance {R : Type*} [CommRing R] [ValuativeRel R] [TopologicalSpace R] [IsValuativeTopology R]
    [T2Space R] : TotallySeparatedSpace R := by
  refine totallySeparatedSpace_iff_exists_isClopen.mpr fun x y hxy ‚Ü¶ ?_
  obtain ‚ü®u, v, hu, hv, hxu, hyv, h‚ÇÅ‚ü© := t2_separation hxy
  obtain ‚ü®w, -, hw‚ü© := (IsValuativeTopology.hasBasis_nhds x).mem_iff.mp (hu.mem_nhds hxu)
  exact ‚ü®_, (IsValuativeTopology.isClopen_ball w).preimage (continuous_sub_right x), by simp,
    fun hy ‚Ü¶ Set.disjoint_iff.mp h‚ÇÅ ‚ü®hw hy, hyv‚ü©‚ü©

lemma IsValuativeTopology.not_connectedSpace
    {R : Type*} [CommRing R] [ValuativeRel R] [TopologicalSpace R] [IsValuativeTopology R]
    [T2Space R] [Nontrivial R] : ¬¨ ConnectedSpace R :=
  fun _ ‚Ü¶ zero_ne_one ((isPreconnected_univ (Œ± := R)).subsingleton trivial trivial)

noncomputable
def Complex.localArtinMapData : ClassFieldTheory.LocalArtinMapData ‚ÑÇ where
  artinMap L _ _ _ _ :=
    let e : ‚ÑÇ ‚âÉ‚Çê[‚ÑÇ] L := .ofBijective (Algebra.ofId _ _)
      IsAlgClosed.algebraMap_bijective_of_isIntegral
    have : Subsingleton (‚ÑÇÀ£ ‚ß∏ normSubgroup ‚ÑÇ L) := by
      rw [normSubgroup_congr e.symm, normSubgroup_self]
      exact QuotientGroup.subsingleton_quotient_top
    have : Subsingleton Gal(L/‚ÑÇ) := (AlgEquiv.autCongr e).symm.subsingleton
    .ofSubsingleton _ _
  isArithFrobAt_artinMap _ _ _ _ _ := by
    cases IsValuativeTopology.not_connectedSpace (inferInstanceAs (ConnectedSpace ‚ÑÇ))
  artinMap_algebraMap L _ _ _ _ M _ _ _ _ _ _ x y := rfl

instance : ClassFieldTheory.SatisfiesLocalClassFieldTheory ‚ÑÇ where
  satisfiesLocalExistenceTheorem := inferInstance
  nonempty_localArtinMapData := ‚ü®Complex.localArtinMapData‚ü©

end Complex

section Real

open NNReal

#check Nonneg.nontrivial

instance Nonneg.nontrivial' {R : Type*} [One R] [Zero R] [Preorder R]
    [ZeroLEOneClass R] [NeZero (1 : R)] :
    Nontrivial { r : R // 0 ‚â§ r } :=
  ‚ü®0, 1, ne_of_apply_ne Subtype.val zero_ne_one‚ü©

@[simps]
noncomputable
def Nonneg.unitsHomeomorphPos (R : Type*) [DivisionSemiring R] [PartialOrder R] [ZeroLEOneClass R]
    [AddLeftMono R] [PosMulMono R] [PosMulReflectLT R]
    [TopologicalSpace R] [ContinuousInv‚ÇÄ R] :
    { r : R // 0 ‚â§ r }À£ ‚âÉ‚Çú { r : R // 0 < r } where
  toFun r := ‚ü®r, lt_of_le_of_ne r.1.2 (Subtype.val_injective.ne r.ne_zero.symm)‚ü©
  invFun r := ‚ü®‚ü®r.1, r.2.le‚ü©, ‚ü®r.1‚Åª¬π, inv_nonneg.mpr r.2.le‚ü©,
    by ext; simp [r.2.ne'], by ext; simp [r.2.ne']‚ü©
  left_inv r := by ext; rfl
  right_inv r := by ext; rfl
  continuous_toFun := by
    rw [Topology.IsEmbedding.subtypeVal.continuous_iff]
    exact Continuous.subtype_val (p := (0 ‚â§ ¬∑)) Units.continuous_val
  continuous_invFun := by
    rw [Units.continuous_iff]
    refine ‚ü®by fun_prop, ?_‚ü©
    suffices Continuous fun (x : { r : R // 0 < r }) ‚Ü¶ (x‚Åª¬π : R) by
      simpa [Topology.IsEmbedding.subtypeVal.continuous_iff, Function.comp_def]
    rw [continuous_iff_continuousAt]
    exact fun x ‚Ü¶ ContinuousAt.inv‚ÇÄ (by fun_prop) x.2.ne'

instance : ConnectedSpace ‚Ñù‚â•0À£ := by
  suffices ConnectedSpace { r : ‚Ñù // 0 < r } from
    let e := Nonneg.unitsHomeomorphPos ‚Ñù; e.symm.surjective.connectedSpace e.symm.continuous
  refine isConnected_iff_connectedSpace (s := { r : ‚Ñù | 0 < r }).mp isConnected_Ioi

lemma mem_normSubgroup_real_complex_iff {x} :
    x ‚àà normSubgroup ‚Ñù ‚ÑÇ ‚Üî 0 < (x : ‚Ñù) := by
  constructor
  ¬∑ rintro ‚ü®x, rfl‚ü©; simp [Algebra.norm_complex_eq]
  ¬∑ exact fun h ‚Ü¶ ‚ü®.mk0 (‚àö x) (by simp [h.le]), by ext; simp [Algebra.norm_complex_eq, h.le]‚ü©

lemma normSubgroup_real_complex :
    normSubgroup ‚Ñù ‚ÑÇ = Units.posSubgroup ‚Ñù :=
  Subgroup.ext fun _ ‚Ü¶ mem_normSubgroup_real_complex_iff

lemma Real.isNormSubgroup_iff {G : Subgroup ‚ÑùÀ£} :
    IsNormSubgroup G ‚Üî G = ‚ä§ ‚à® G = Units.posSubgroup ‚Ñù := by
  rw [‚Üê normSubgroup_real_complex]
  refine ‚ü®?_, (Or.elim ¬∑ (¬∑ ‚ñ∏ isNormSubgroup_top ‚Ñù) (¬∑ ‚ñ∏ isNormSubgroup_normSubgroup ‚Ñù ‚ÑÇ))‚ü©
  rintro ‚ü®L, _, _, _, _, rfl‚ü©
  obtain ‚ü®‚ü®e‚ü©‚ü© | ‚ü®‚ü®e‚ü©‚ü© := IsAlgClosed.nonempty_algEquiv_or_of_finrank_eq_two L
      Complex.finrank_real_complex <;> simp [normSubgroup_congr e]

lemma Subgroup.isSimpleOrder {G : Type*} [Group G] (hG : Nat.card G = 2) :
    IsSimpleOrder (Subgroup G) where
  __ :=
    have : Finite G := Nat.finite_of_card_ne_zero (by simp [hG])
    Subgroup.nontrivial_iff.mpr (Finite.one_lt_card_iff_nontrivial.mp (by simp [hG]))
  eq_bot_or_eq_top H := by
    have : Finite G := Nat.finite_of_card_ne_zero (by simp [hG])
    have := H.card_le_card_group.trans_eq hG
    have : 0 < Nat.card H := Nat.card_pos
    interval_cases h : Nat.card H
    ¬∑ simp_all
    ¬∑ rw [‚Üê hG, Subgroup.card_eq_iff_eq_top] at h
      exact .inr h

lemma eq_or_eq_top_of_index_eq_two {G : Type*} [Group G] {H K : Subgroup G}
    (h : K ‚â§ H) (hK : K.index = 2) : H = K ‚à® H = ‚ä§ := by
  have : K.Normal := Subgroup.normal_of_index_eq_two hK
  have := Subgroup.isSimpleOrder hK
  replace h : (QuotientGroup.mk' K).ker ‚â§ H := by simpa
  refine (eq_bot_or_eq_top (H.map (QuotientGroup.mk' K))).imp ?_ ?_ <;> intro h'
  ¬∑ rw [‚Üê Subgroup.comap_map_eq_self h, h', MonoidHom.comap_bot, QuotientGroup.ker_mk']
  ¬∑ rw [‚Üê Subgroup.comap_map_eq_self h, h', Subgroup.comap_top]

lemma Units.index_posSubgroup (R : Type*) [Ring R] [LinearOrder R] [IsStrictOrderedRing R] :
    (posSubgroup R).index = 2 := by
  rw [Subgroup.index_eq_two_iff]
  refine ‚ü®-1, fun a ‚Ü¶ ?_‚ü©
  obtain h | h := lt_or_gt_of_ne a.ne_zero
  ¬∑ simp [h, h.le]
  ¬∑ simp [h, xor_comm, h.le]

lemma Real.isOpen_subgroup_units_iff {G : Subgroup ‚ÑùÀ£} :
    IsOpen (X := ‚ÑùÀ£) G ‚Üî G = ‚ä§ ‚à® G = Units.posSubgroup ‚Ñù := by
  constructor
  ¬∑ intro h
    have := (G.comap (Units.map NNReal.toRealHom.toMonoidHom)).eq_top_of_isOpen_of_connectedSpace
      (h.preimage (by fun_prop))
    have : Units.posSubgroup ‚Ñù ‚â§ G := fun r hr ‚Ü¶ by
      have : _ ‚àà G := this.ge (Set.mem_univ ((Nonneg.unitsHomeomorphPos ‚Ñù).symm ‚ü®r, hr‚ü©))
      convert this
      ext
      simp only [RingHom.toMonoidHom_eq_coe, Units.coe_map, MonoidHom.coe_coe, coe_toRealHom]
      convert (Nonneg.val_unitsHomeomorphPos_symm_apply_coe ‚Ñù ‚ü®r, hr‚ü©).symm
    exact (eq_or_eq_top_of_index_eq_two this (Units.index_posSubgroup _)).symm
  ¬∑ rintro (rfl | rfl)
    ¬∑ exact isOpen_univ
    ¬∑ exact (isOpen_Ioi (a := (0 : ‚Ñù))).preimage Units.continuous_val

instance : ClassFieldTheory.SatisfiesLocalExistenceTheorem ‚Ñù where
  cond G := by
    rw [Real.isNormSubgroup_iff, Real.isOpen_subgroup_units_iff, and_iff_left_iff_imp]
    rintro (rfl | rfl)
    ¬∑ infer_instance
    ¬∑ rw [Subgroup.finiteIndex_iff, Units.index_posSubgroup]; simp

lemma QuotientGroup.mk_eq_one_iff {G : Type*} [Group G] (H : Subgroup G) [H.Normal] {x : G} :
    (x : G ‚ß∏ H) = 1 ‚Üî x ‚àà H := by
  exact eq_one_iff x

noncomputable
def Real.localArtinMapData : ClassFieldTheory.LocalArtinMapData ‚Ñù where
  artinMap L _ _ _ _ :=
    open scoped Classical in
    if e : Nonempty (L ‚âÉ‚Çê[‚Ñù] ‚Ñù) then
      have : Subsingleton (‚ÑùÀ£ ‚ß∏ normSubgroup ‚Ñù L) := by
        rw [normSubgroup_congr e.some, normSubgroup_self]
        exact QuotientGroup.subsingleton_quotient_top
      have : Subsingleton Gal(L/‚Ñù) := (AlgEquiv.autCongr e.some).subsingleton
      .ofSubsingleton _ _
    else
      have e := (Real.nonempty_algEquiv_or L).resolve_left e
      mulEquivOfPrimeCardEq (p := 2) (by
        rw [normSubgroup_congr e.some, normSubgroup_real_complex]
        exact Units.index_posSubgroup _) (by
        rw [Nat.card_congr (AlgEquiv.autCongr e.some).toEquiv, IsGalois.card_aut_eq_finrank,
          Complex.finrank_real_complex])
  isArithFrobAt_artinMap _ := by
    cases IsValuativeTopology.not_connectedSpace (inferInstanceAs (ConnectedSpace ‚Ñù))
  artinMap_algebraMap L _ _ _ _ M _ _ _ _ _ _ x y := by
    split_ifs with hM hL hL
    ¬∑ rfl
    ¬∑ have ‚ü®eM‚ü© := hM
      have : Function.Surjective (algebraMap L M) := fun x ‚Ü¶ ‚ü®algebraMap ‚Ñù L (eM x), by
        trans eM.symm (eM x ‚Ä¢ 1)
        ¬∑ rw [‚Üê IsScalarTower.algebraMap_apply, Algebra.algebraMap_eq_smul_one, map_smul, map_one]
        ¬∑ simp‚ü©
      cases hL ‚ü®(AlgEquiv.ofBijective (IsScalarTower.toAlgHom ‚Ñù L M)
        ‚ü®(algebraMap L M).injective, this‚ü©).trans eM‚ü©
    ¬∑ have ‚ü®eL‚ü© := hL
      obtain ‚ü®y, rfl‚ü© : ‚àÉ z, algebraMap ‚Ñù L z = y := ‚ü®eL y,
        by simpa using congr($(Algebra.ext_id _ (Algebra.ofId ‚Ñù L) eL.symm.toAlgHom) (eL y))‚ü©
      simp [‚Üê IsScalarTower.algebraMap_apply]
    ¬∑ have eL := ((Real.nonempty_algEquiv_or L).resolve_left hL).some
      have eM := ((Real.nonempty_algEquiv_or M).resolve_left hM).some
      have : Function.Bijective (algebraMap L M) := by
        have := IsAlgClosed.of_ringEquiv _ _ eL.toRingEquiv.symm
        have := IsAlgClosed.of_ringEquiv _ _ eM.toRingEquiv.symm
        have : FiniteDimensional L M := Module.Finite.of_restrictScalars_finite ‚Ñù L M
        have : IsAlgClosure L M := ‚ü®inferInstance, inferInstance‚ü©
        let e := IsAlgClosure.equiv L L M
        change Function.Bijective (Algebra.ofId L M)
        rw [Algebra.ext_id _ (Algebra.ofId L M) e.toAlgHom]
        exact e.bijective
      let e : L ‚âÉ‚Çê[‚Ñù] M := .ofBijective (Algebra.algHom _ _ _) this
      by_cases hx : x ‚àà normSubgroup ‚Ñù L
      ¬∑ simp [(QuotientGroup.eq_one_iff _).mpr hx,
          (QuotientGroup.eq_one_iff _).mpr ((normSubgroup_congr (eL.trans eM.symm)).le hx)]
      ¬∑ dsimp
        generalize_proofs _ h‚ÇÅ h‚ÇÇ _ h‚ÇÉ h‚ÇÑ
        trans e.toRingHom ((e.symm.restrictScalars ‚Ñù).autCongr (mulEquivOfPrimeCardEq h‚ÇÅ h‚ÇÇ x) y)
        ¬∑ simp; rfl
        ¬∑ congr 2
          exact ((Nat.card_eq_two_iff' 1).mp h‚ÇÑ).unique
            (by simpa [-AlgEquiv.autCongr_apply, normSubgroup_congr (eM.trans eL.symm)])
            (by simpa [-AlgEquiv.autCongr_apply])

instance : ClassFieldTheory.SatisfiesLocalClassFieldTheory ‚Ñù where
  satisfiesLocalExistenceTheorem := inferInstance
  nonempty_localArtinMapData := ‚ü®Real.localArtinMapData‚ü©

end Real
